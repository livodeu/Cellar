
apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// https://developer.android.com/reference/tools/gradle-api

android {
    compileSdkVersion 30
    ndkVersion '21.3.6528147'

    splits {
        // because libvlc is huge (ca. 20+ MB per ABI, compressed!)
        // https://developer.android.com/studio/build/configure-apk-splits.html
        abi {
            enable true
            reset()
            include "arm64-v8a", "armeabi-v7a", "x86"//, "x86_64"
            universalApk false
        }
    }

    defaultConfig {
        applicationId "net.cellar"
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 30
        versionCode 1
        versionName "0.1"
        resConfigs "en", "de", "fr"
        def filesAuthority = defaultConfig.applicationId + ".fileprovider"
        def dogsAuthority = defaultConfig.applicationId + ".dogs"
        def appLabel = "@string/app_name"
        manifestPlaceholders = [fileproviderauth: filesAuthority, docsproviderauth: dogsAuthority, applabel: appLabel]
        buildConfigField("String", "FILEPROVIDER_AUTH", "\"" + filesAuthority + "\"")
        buildConfigField("String", "DOCSPROVIDER_AUTH", "\"" + dogsAuthority + "\"")
        resValue "string", "application_details_settings", "package:" + defaultConfig.applicationId
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments disableAnalytics: 'true', listener: 'net.cellar.LoggingListener'
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "4g"
        preDexLibraries true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError true
        disable 'MissingTranslation'
        disable 'ViewConstructor'
    }

    // https://google.github.io/android-gradle-dsl/3.1/com.android.build.gradle.internal.dsl.PackagingOptions.html
    packagingOptions {
        exclude 'META-INF/README.md'
        exclude 'META-INF/CHANGES'
        jniLibs.useLegacyPackaging = false
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            def filesAuthority = defaultConfig.applicationId + ".debug.fileprovider"
            def dogsAuthority = defaultConfig.applicationId + ".debug.dogs"
            def appLabel = "@string/app_name_debug"
            manifestPlaceholders = [fileproviderauth: filesAuthority, docsproviderauth: dogsAuthority, applabel: appLabel]
            buildConfigField("String", "FILEPROVIDER_AUTH", "\"" + filesAuthority + "\"")
            buildConfigField("String", "DOCSPROVIDER_AUTH", "\"" + dogsAuthority + "\"")
            resValue "string", "application_details_settings", "package:" + defaultConfig.applicationId + applicationIdSuffix
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            crunchPngs true
            aaptOptions {
                cruncherEnabled true
                ignoreAssetsPattern "*.lua"
            }
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "canary"

    productFlavors {
        std {
            dimension "canary"
            buildConfigField("Boolean", "CANARY", "false")
        }
        canary {
            dimension "canary"
            buildConfigField("Boolean", "CANARY", "true")
        }
    }

    variantFilter { variant ->
        if (variant.name == "canaryRelease") {
            setIgnore(true)
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += [
                '-Xlint:all',
                '-Xlint:-deprecation',
                '-Xlint:-unchecked',
                '-Xlint:-serial',
                //'-Werror'
        ]
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    // https://github.com/google/tink/
    implementation 'com.google.crypto.tink:tink-android:1.6.1'
    // https://github.com/square/okhttp & https://square.github.io/okhttp/
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'  // Apache License 2.0; requires API level 21
    // https://github.com/square/okhttp/tree/master/okhttp-brotli
    implementation 'com.squareup.okhttp3:okhttp-brotli:4.9.1'
    // https://mvnrepository.com/artifact/org.videolan.android/libvlc-all?repo=jcenter
    implementation 'org.videolan.android:libvlc-all:3.3.14' // LGPLv2

    // https://github.com/wseemann/FFmpegMediaMetadataRetriever
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-core:1.0.15'   // Apache License 2.0
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-native-armeabi-v7a:1.0.15' // Apache License 2.0
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-native-x86:1.0.15' // Apache License 2.0
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever-native-arm64-v8a:1.0.15'   // Apache License 2.0

    // https://developer.android.com/reference/androidx/exifinterface/media/ExifInterface
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    // https://github.com/Beyka/Android-TiffBitmapFactory
    implementation 'com.github.beyka:androidtiffbitmapfactory:0.9.8.7'  // MIT License
    // https://github.com/TeamNewPipe/NewPipeExtractor & https://teamnewpipe.github.io/documentation/
    implementation 'com.github.TeamNewPipe:NewPipeExtractor:v0.21.8'
    // https://commons.apache.org/proper/commons-net/ & https://github.com/apache/commons-net
    implementation 'commons-net:commons-net:3.8.0'
    // https://github.com/srikanth-lingala/zip4j
    implementation 'net.lingala.zip4j:zip4j:2.9.0'

    // http://www.jcraft.com/jsch/
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'com.jcraft:jzlib:1.1.3'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // https://github.com/square/leakcanary/tree/main/plumber-android
    //implementation 'com.squareup.leakcanary:plumber-android:2.7'
    // https://github.com/square/leakcanary
    canaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    //noinspection GradleDependency
    debugImplementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
