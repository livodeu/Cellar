@startuml
title MainActivity
skinparam ConditionEndStyle hline
start
#3ddc84:Intent]
note right: The 'Included data' phrase below refers to data attached to the Intent
partition "Handle Intent " {
    if (Included data
    encompasses
    a notification id?) then (yes)
        :Dismiss notification;
    else (no)
    endif
    if (Intent Action is
    //RETRY//?) then (yes)
        :Fill <back:#ffe603>Wish</back> with included data
        from previous attempt;
    elseif (Intent Action is
    //PROCESS WISH//?) then (yes)
        :Fill <back:#ffe603>Wish</back> with included data;
    elseif (Intent Action is
    //ADD TO QUEUE//?) then (yes)
        :Add included data to queue;
        stop;
    elseif (Intent Action is
    //JUST REMOVE NOTIFICATION//?) then (yes)
        stop;
    else (any other
    Intent Action)
        if (Intent encompasses
        enough data?) then (yes)
            :Fill <back:#ffe603>Wish</back> with Intent data;
        else
            -> no;
            stop;
        endif
    endif
}

#ffe603:Wish]
note right: Basically a beefed-up Intent

#3ddc84:Wait for LoaderService connectionâ€¦;

partition "Proceed " {
    if (Are credentials required?) then (yes)
        :Let user enter credentials;
    else (no)
    endif
    if (<back:#ffe603>Wish</back> represents a playlist?) then (yes)
        :Proceed with remote
        or local playlist;
        if (Is it a remote playlist?) then (yes)
            :Load remote playlist;
        else (no)
        endif
        :Proceed with
        local playlist;
        :Parse playlist;
        if (Is it a media playlist?) then (yes)
            :Add media items to queue;
            stop
        else (no)
            :Let user select variant;
        endif
    else (no)
    endif
}
partition "Instruct LoaderService " {
    switch (Protocol)
    case ( https / http)
        if (<back:#ffe603>Wish</back> has <back:#ffe603>UriHandler</back>?) then (yes)
            :load via UriHandler;
        else (no)
            :load;
        endif
    case ( ftp)
        :loadftp;
    case ( sftp)
        :loadsftp;
    case ( local)
        :copy;
    endswitch
}
stop
@enduml
